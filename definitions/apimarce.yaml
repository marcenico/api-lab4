paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: "Change a user's password."
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: "Reset user's password via a password-reset token."
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Articulos:
    post:
      tags:
        - Articulo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Articulo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    patch:
      tags:
        - Articulo
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Articulo.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    put:
      tags:
        - Articulo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Articulo.replaceOrCreate__put_Articulos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    get:
      tags:
        - Articulo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Articulo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/replaceOrCreate:
    post:
      tags:
        - Articulo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Articulo.replaceOrCreate__post_Articulos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/upsertWithWhere:
    post:
      tags:
        - Articulo
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Articulo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  '/Articulos/{id}/exists':
    get:
      tags:
        - Articulo
      summary: Check whether a model instance exists in the data source.
      operationId: 'Articulo.exists__get_Articulos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Articulos/{id}':
    head:
      tags:
        - Articulo
      summary: Check whether a model instance exists in the data source.
      operationId: 'Articulo.exists__head_Articulos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Articulo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Articulo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    put:
      tags:
        - Articulo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Articulo.replaceById__put_Articulos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    delete:
      tags:
        - Articulo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Articulo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Articulo
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Articulo.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Articulo'
        - name: id
          in: path
          description: Articulo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  '/Articulos/{id}/replace':
    post:
      tags:
        - Articulo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Articulo.replaceById__post_Articulos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/findOne:
    get:
      tags:
        - Articulo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Articulo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/update:
    post:
      tags:
        - Articulo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Articulo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Articulos/count:
    get:
      tags:
        - Articulo
      summary: Count instances of the model matched by where from the data source.
      operationId: Articulo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Clientes:
    post:
      tags:
        - Cliente
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Cliente.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    patch:
      tags:
        - Cliente
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Cliente.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    put:
      tags:
        - Cliente
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Cliente.replaceOrCreate__put_Clientes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    get:
      tags:
        - Cliente
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Cliente.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/replaceOrCreate:
    post:
      tags:
        - Cliente
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Cliente.replaceOrCreate__post_Clientes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/upsertWithWhere:
    post:
      tags:
        - Cliente
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Cliente.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  '/Clientes/{id}/exists':
    get:
      tags:
        - Cliente
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cliente.exists__get_Clientes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Clientes/{id}':
    head:
      tags:
        - Cliente
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cliente.exists__head_Clientes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Cliente
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Cliente.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    put:
      tags:
        - Cliente
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Cliente.replaceById__put_Clientes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    delete:
      tags:
        - Cliente
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Cliente.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Cliente
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Cliente.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cliente'
        - name: id
          in: path
          description: Cliente id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  '/Clientes/{id}/replace':
    post:
      tags:
        - Cliente
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Cliente.replaceById__post_Clientes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/findOne:
    get:
      tags:
        - Cliente
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Cliente.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/update:
    post:
      tags:
        - Cliente
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Cliente.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Clientes/count:
    get:
      tags:
        - Cliente
      summary: Count instances of the model matched by where from the data source.
      operationId: Cliente.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Domicilios:
    post:
      tags:
        - Domicilio
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Domicilio.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    patch:
      tags:
        - Domicilio
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Domicilio.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    put:
      tags:
        - Domicilio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Domicilio.replaceOrCreate__put_Domicilios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    get:
      tags:
        - Domicilio
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Domicilio.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/replaceOrCreate:
    post:
      tags:
        - Domicilio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Domicilio.replaceOrCreate__post_Domicilios_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/upsertWithWhere:
    post:
      tags:
        - Domicilio
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Domicilio.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  '/Domicilios/{id}/exists':
    get:
      tags:
        - Domicilio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Domicilio.exists__get_Domicilios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Domicilios/{id}':
    head:
      tags:
        - Domicilio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Domicilio.exists__head_Domicilios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Domicilio
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Domicilio.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    put:
      tags:
        - Domicilio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Domicilio.replaceById__put_Domicilios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    delete:
      tags:
        - Domicilio
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Domicilio.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Domicilio
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Domicilio.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
        - name: id
          in: path
          description: Domicilio id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  '/Domicilios/{id}/replace':
    post:
      tags:
        - Domicilio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Domicilio.replaceById__post_Domicilios_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/findOne:
    get:
      tags:
        - Domicilio
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Domicilio.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/update:
    post:
      tags:
        - Domicilio
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Domicilio.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Domicilios/count:
    get:
      tags:
        - Domicilio
      summary: Count instances of the model matched by where from the data source.
      operationId: Domicilio.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Migrations:
    post:
      tags:
        - Migrations
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Migrations.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
    patch:
      tags:
        - Migrations
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Migrations.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
    put:
      tags:
        - Migrations
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Migrations.replaceOrCreate__put_Migrations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
    get:
      tags:
        - Migrations
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Migrations.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Migrations'
      deprecated: false
  /Migrations/replaceOrCreate:
    post:
      tags:
        - Migrations
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Migrations.replaceOrCreate__post_Migrations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
  /Migrations/upsertWithWhere:
    post:
      tags:
        - Migrations
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Migrations.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
  '/Migrations/{id}/exists':
    get:
      tags:
        - Migrations
      summary: Check whether a model instance exists in the data source.
      operationId: 'Migrations.exists__get_Migrations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Migrations/{id}':
    head:
      tags:
        - Migrations
      summary: Check whether a model instance exists in the data source.
      operationId: 'Migrations.exists__head_Migrations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Migrations
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Migrations.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
    put:
      tags:
        - Migrations
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Migrations.replaceById__put_Migrations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
    delete:
      tags:
        - Migrations
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Migrations.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Migrations
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Migrations.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Migrations'
        - name: id
          in: path
          description: Migrations id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
  '/Migrations/{id}/replace':
    post:
      tags:
        - Migrations
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Migrations.replaceById__post_Migrations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
  /Migrations/findOne:
    get:
      tags:
        - Migrations
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Migrations.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Migrations'
      deprecated: false
  /Migrations/update:
    post:
      tags:
        - Migrations
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Migrations.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Migrations'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Migrations/count:
    get:
      tags:
        - Migrations
      summary: Count instances of the model matched by where from the data source.
      operationId: Migrations.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pedidoventa:
    post:
      tags:
        - Pedidoventa
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pedidoventa.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    patch:
      tags:
        - Pedidoventa
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pedidoventa.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    put:
      tags:
        - Pedidoventa
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventa.replaceOrCreate__put_Pedidoventa
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    get:
      tags:
        - Pedidoventa
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pedidoventa.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/replaceOrCreate:
    post:
      tags:
        - Pedidoventa
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventa.replaceOrCreate__post_Pedidoventa_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/upsertWithWhere:
    post:
      tags:
        - Pedidoventa
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pedidoventa.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  '/Pedidoventa/{id}/exists':
    get:
      tags:
        - Pedidoventa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventa.exists__get_Pedidoventa_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pedidoventa/{id}':
    head:
      tags:
        - Pedidoventa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventa.exists__head_Pedidoventa_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pedidoventa
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pedidoventa.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    put:
      tags:
        - Pedidoventa
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventa.replaceById__put_Pedidoventa_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    delete:
      tags:
        - Pedidoventa
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pedidoventa.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Pedidoventa
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Pedidoventa.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventa'
        - name: id
          in: path
          description: Pedidoventa id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  '/Pedidoventa/{id}/replace':
    post:
      tags:
        - Pedidoventa
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventa.replaceById__post_Pedidoventa_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/findOne:
    get:
      tags:
        - Pedidoventa
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pedidoventa.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/update:
    post:
      tags:
        - Pedidoventa
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pedidoventa.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pedidoventa/count:
    get:
      tags:
        - Pedidoventa
      summary: Count instances of the model matched by where from the data source.
      operationId: Pedidoventa.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pedidoventadetalles:
    post:
      tags:
        - Pedidoventadetalle
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pedidoventadetalle.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    patch:
      tags:
        - Pedidoventadetalle
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pedidoventadetalle.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    put:
      tags:
        - Pedidoventadetalle
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventadetalle.replaceOrCreate__put_Pedidoventadetalles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    get:
      tags:
        - Pedidoventadetalle
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pedidoventadetalle.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/replaceOrCreate:
    post:
      tags:
        - Pedidoventadetalle
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventadetalle.replaceOrCreate__post_Pedidoventadetalles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/upsertWithWhere:
    post:
      tags:
        - Pedidoventadetalle
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pedidoventadetalle.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  '/Pedidoventadetalles/{id}/exists':
    get:
      tags:
        - Pedidoventadetalle
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventadetalle.exists__get_Pedidoventadetalles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pedidoventadetalles/{id}':
    head:
      tags:
        - Pedidoventadetalle
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventadetalle.exists__head_Pedidoventadetalles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pedidoventadetalle
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pedidoventadetalle.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    put:
      tags:
        - Pedidoventadetalle
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventadetalle.replaceById__put_Pedidoventadetalles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    delete:
      tags:
        - Pedidoventadetalle
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pedidoventadetalle.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Pedidoventadetalle
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Pedidoventadetalle.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventadetalle'
        - name: id
          in: path
          description: Pedidoventadetalle id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  '/Pedidoventadetalles/{id}/replace':
    post:
      tags:
        - Pedidoventadetalle
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventadetalle.replaceById__post_Pedidoventadetalles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/findOne:
    get:
      tags:
        - Pedidoventadetalle
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pedidoventadetalle.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/update:
    post:
      tags:
        - Pedidoventadetalle
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pedidoventadetalle.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pedidoventadetalles/count:
    get:
      tags:
        - Pedidoventadetalle
      summary: Count instances of the model matched by where from the data source.
      operationId: Pedidoventadetalle.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Rubros:
    post:
      tags:
        - Rubro
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Rubro.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    patch:
      tags:
        - Rubro
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Rubro.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    put:
      tags:
        - Rubro
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Rubro.replaceOrCreate__put_Rubros
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    get:
      tags:
        - Rubro
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Rubro.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/replaceOrCreate:
    post:
      tags:
        - Rubro
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Rubro.replaceOrCreate__post_Rubros_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/upsertWithWhere:
    post:
      tags:
        - Rubro
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Rubro.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  '/Rubros/{id}/exists':
    get:
      tags:
        - Rubro
      summary: Check whether a model instance exists in the data source.
      operationId: 'Rubro.exists__get_Rubros_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Rubros/{id}':
    head:
      tags:
        - Rubro
      summary: Check whether a model instance exists in the data source.
      operationId: 'Rubro.exists__head_Rubros_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Rubro
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Rubro.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    put:
      tags:
        - Rubro
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Rubro.replaceById__put_Rubros_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    delete:
      tags:
        - Rubro
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Rubro.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Rubro
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Rubro.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Rubro'
        - name: id
          in: path
          description: Rubro id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  '/Rubros/{id}/replace':
    post:
      tags:
        - Rubro
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Rubro.replaceById__post_Rubros_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/findOne:
    get:
      tags:
        - Rubro
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Rubro.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/update:
    post:
      tags:
        - Rubro
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Rubro.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Rubros/count:
    get:
      tags:
        - Rubro
      summary: Count instances of the model matched by where from the data source.
      operationId: Rubro.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Usuarios:
    post:
      tags:
        - Usuarios
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Usuarios.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
    patch:
      tags:
        - Usuarios
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Usuarios.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
    put:
      tags:
        - Usuarios
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Usuarios.replaceOrCreate__put_Usuarios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
    get:
      tags:
        - Usuarios
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Usuarios.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Usuarios'
      deprecated: false
  /Usuarios/replaceOrCreate:
    post:
      tags:
        - Usuarios
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Usuarios.replaceOrCreate__post_Usuarios_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
  /Usuarios/upsertWithWhere:
    post:
      tags:
        - Usuarios
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Usuarios.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
  '/Usuarios/{id}/exists':
    get:
      tags:
        - Usuarios
      summary: Check whether a model instance exists in the data source.
      operationId: 'Usuarios.exists__get_Usuarios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Usuarios/{id}':
    head:
      tags:
        - Usuarios
      summary: Check whether a model instance exists in the data source.
      operationId: 'Usuarios.exists__head_Usuarios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Usuarios
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Usuarios.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
    put:
      tags:
        - Usuarios
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Usuarios.replaceById__put_Usuarios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
    delete:
      tags:
        - Usuarios
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Usuarios.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Usuarios
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Usuarios.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Usuarios'
        - name: id
          in: path
          description: Usuarios id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
  '/Usuarios/{id}/replace':
    post:
      tags:
        - Usuarios
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Usuarios.replaceById__post_Usuarios_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
  /Usuarios/findOne:
    get:
      tags:
        - Usuarios
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Usuarios.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuarios'
      deprecated: false
  /Usuarios/update:
    post:
      tags:
        - Usuarios
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Usuarios.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Usuarios'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Usuarios/count:
    get:
      tags:
        - Usuarios
      summary: Count instances of the model matched by where from the data source.
      operationId: Usuarios.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Articulo:
    properties:
      id:
        type: number
        format: double
      denominacion:
        maxLength: 45
        type: string
      codigo:
        maxLength: 45
        type: string
      precioCompra:
        type: number
        format: double
      precioVenta:
        type: number
        format: double
      iva:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      rubroId:
        type: number
        format: double
    required:
      - id
      - denominacion
      - codigo
      - precioCompra
      - precioVenta
      - iva
      - rubroId
    additionalProperties: false
  Cliente:
    properties:
      id:
        type: number
        format: double
      razonSocial:
        maxLength: 45
        type: string
      cuit:
        maxLength: 45
        type: string
      saldo:
        type: number
        format: double
      domicilioId:
        type: number
        format: double
    required:
      - id
      - razonSocial
      - cuit
      - domicilioId
    additionalProperties: false
  Domicilio:
    properties:
      id:
        type: number
        format: double
      calle:
        maxLength: 45
        type: string
      numero:
        maxLength: 45
        type: string
      localidad:
        maxLength: 45
        type: string
      latitud:
        type: number
        format: double
      longitud:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - id
      - calle
      - numero
      - localidad
      - latitud
      - longitud
    additionalProperties: false
  Migrations:
    properties:
      id:
        type: number
        format: double
      migration:
        maxLength: 45
        type: string
      batch:
        type: number
        format: double
    required:
      - id
      - migration
      - batch
    additionalProperties: false
  Pedidoventa:
    properties:
      id:
        type: number
        format: double
      nroPedido:
        type: number
        format: double
      fechaPedido:
        type: string
        format: date-time
      fechaEstimadaEntrega:
        type: string
        format: date-time
      gastosEnvio:
        type: number
        format: double
      estado:
        maxLength: 45
        type: string
      entregado:
        type: number
        format: double
      subTotal:
        type: number
        format: double
      montoTotal:
        type: number
        format: double
      clienteId:
        type: number
        format: double
      domicilioId:
        type: number
        format: double
    required:
      - id
      - nroPedido
      - fechaPedido
      - gastosEnvio
      - estado
      - entregado
      - subTotal
      - montoTotal
      - clienteId
      - domicilioId
    additionalProperties: false
  Pedidoventadetalle:
    properties:
      id:
        type: number
        format: double
      cantidad:
        type: number
        format: double
      subTotal:
        type: number
        format: double
      porcentajeDescuento:
        type: number
        format: double
      articuloId:
        type: number
        format: double
      pedidoVentaId:
        type: number
        format: double
    required:
      - id
      - cantidad
      - subTotal
      - porcentajeDescuento
      - articuloId
      - pedidoVentaId
    additionalProperties: false
  Rubro:
    properties:
      id:
        type: number
        format: double
      codigo:
        maxLength: 45
        type: string
      denominacion:
        maxLength: 45
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      rubroPadreId:
        type: number
        format: double
    required:
      - id
      - codigo
      - denominacion
    additionalProperties: false
  Usuarios:
    properties:
      id:
        type: number
        format: double
      name:
        maxLength: 45
        type: string
      email:
        maxLength: 45
        type: string
      password:
        maxLength: 45
        type: string
      rememberToken:
        maxLength: 45
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - id
      - name
      - email
      - password
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: apimarce
  version: 1.0.0
  title: apimarce
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
